var_label(df_hh$FCSCat28) <- "FCS Categories"
round(prop.table(table(df_hh$FCSCat28)), 2)
# View(df_hh)
colnames(df_hh) <- gsub("/", "_", colnames(df_hh)) # Replace "/" with "_" in columns
colnames(df_ind) <- gsub("/", "_", colnames(df_ind))# Replace "/" with "_" in columns
df_ind <- df_ind %>% # Those who were able to access healthcare
mutate(health_access = case_when(
H3_SS_HLTH_OBTAIN_CARE == "yes"  ~ 1,
H3_SS_HLTH_OBTAIN_CARE == "DoNotKnow" ~ NA_real_,
H3_SS_HLTH_OBTAIN_CARE == "PreferNotAnswer" ~ NA_real_,
TRUE ~ 0)
)
df_ind <- df_ind %>% # Those who needed and asked to access healthcare - remove those who didn't try to access healthcare for some reasons
mutate(health_need = case_when(
H1_SS_HLTH_PBLM == "yes" & H3_SS_HLTH_OBTAIN_CARE == "no" & H4_SM_HLTH_ACC_BARRIER == "wanted_to_wait_and_see_if_the_problem_go_better" ~ 0,
H1_SS_HLTH_PBLM == "yes" & H3_SS_HLTH_OBTAIN_CARE == "no" & H4_SM_HLTH_ACC_BARRIER == "do_not_trust_local_provider" ~ 0,
H1_SS_HLTH_PBLM == "yes" & H3_SS_HLTH_OBTAIN_CARE == "no" & H4_SM_HLTH_ACC_BARRIER == "fear_or_distrust_of_HW_EXAM_treatment" ~ 0,
H1_SS_HLTH_PBLM == "yes" & H3_SS_HLTH_OBTAIN_CARE == "no" & H4_SM_HLTH_ACC_BARRIER == "other" ~ 0,
H1_SS_HLTH_PBLM == "yes" ~ 1,
H1_SS_HLTH_PBLM == "DoNotKnow" ~ NA_real_,
H1_SS_HLTH_PBLM == "PreferNotAnswer" ~ NA_real_,
TRUE ~ 0
)) %>%
mutate(impact2_3_health = health_access / health_need) %>%
mutate(impact2_3_health = labelled(impact2_3_health,
labels = c (
"Yes"= 1,
"No"= 0
),
label="Proportion of PoC with access to health services"))
table(df_ind$impact2_3_health)
round(prop.table(table(df_ind$impact2_3_health)), 2)
round(prop.table(table(df_ind$impact2_3_health)), 3)
df_ind <- df_ind %>%
mutate(edu_primary = case_when(
(E1_SS_ATT_EDU == "enrolledandattended") & (DR.11_NUM_AGE > 5 & DR.11_NUM_AGE < 11) ~ 1,  # attending school in person
(E1_SS_ATT_EDU == "enrolledanddropped") & (DR.11_NUM_AGE > 5 & DR.11_NUM_AGE < 11) ~ 0,  # dropped so not attending
(E1_SS_ATT_EDU == "no") & (DR.11_NUM_AGE > 5 & DR.11_NUM_AGE < 11) ~ 0,                  # not attending school at all
(E1_SS_ATT_EDU == "pnta") & (DR.11_NUM_AGE > 5 & DR.11_NUM_AGE < 11) ~ NA_real_,
TRUE ~ NA_real_)  # default case, added to handle other cases not covered above
) %>%
mutate(age_primary = case_when(
DR.11_NUM_AGE > 5 & DR.11_NUM_AGE < 11 ~ 1,
TRUE ~ NA_real_)
) %>%
mutate(impact3_2a_primary_edu_enrol_rate = sum(edu_primary, na.rm = TRUE) / sum(age_primary, na.rm = TRUE)) %>%
mutate(impact3_2a_primary_edu_enrol_rate = round(impact3_2a_primary_edu_enrol_rate, 2)) %>%
mutate(impact3_2a_primary_edu_enrol_rate = labelled(impact3_2a_primary_edu_enrol_rate,
labels = c("Yes" = 1,
"No" = 0),
label = "Proportion of persons of concern enrolled in primary education"))
table(df_ind$impact3_2a_primary_edu_enrol_rate)
df_ind <- df_ind %>%
mutate(edu_primary = case_when(
(E1_SS_ATT_EDU == "enrolledandattended") & (DR.11_NUM_AGE > 10 & DR.11_NUM_AGE < 16) ~ 1,  # attending in person
(E1_SS_ATT_EDU == "enrolledanddropped") & (DR.11_NUM_AGE > 10 & DR.11_NUM_AGE < 16) ~ 0,  # dropped so not attending in person
E1_SS_ATT_EDU == "no" & (DR.11_NUM_AGE > 10 & DR.11_NUM_AGE < 16) ~ 0,     # not attending education at all
(E1_SS_ATT_EDU == "pnta") & (DR.11_NUM_AGE > 10 & DR.11_NUM_AGE < 16) ~ NA_real_,
TRUE ~ NA_real_)  # default case, added to handle other cases not covered above
) %>%
mutate(age_primary = case_when(
DR.11_NUM_AGE > 10 & DR.11_NUM_AGE < 16 ~ 1,
TRUE ~ NA_real_)
) %>%
mutate(impact3_2b_secondary_edu_enrol_rate = sum(edu_primary, na.rm = TRUE) / sum(age_primary, na.rm = TRUE)) %>%
mutate(impact3_2b_secondary_edu_enrol_rate = round(impact3_2b_secondary_edu_enrol_rate, 2)) %>%
mutate(impact3_2b_secondary_edu_enrol_rate = labelled(impact3_2b_secondary_edu_enrol_rate,
labels = c("Yes" = 1,
"No" = 0),
label = "Proportion of persons of concern enrolled in secondary education"))
table(df_ind$impact3_2b_secondary_edu_enrol_rate)
df_hh <- df_hh %>%
mutate(impact3_3_safety_walking = case_when(
PRT06_SS_SAFETY_LVL =="very_safe" | PRT06_SS_SAFETY_LVL == "fairly_safe" ~ 1,
PRT06_SS_SAFETY_LVL == "bit_unsafe" | PRT06_SS_SAFETY_LVL == "very_unsafe" ~ 0 ,
TRUE ~ NA_real_)
) %>%
mutate(impact3_3_safety_walking = labelled(impact3_3_safety_walking,
labels = c(
"Yes"= 1,
"No"= 0
),
label="Proportion of population that feel safe walking alone in their neighbourhood"))
table(df_hh$impact3_3_safety_walking)
round(prop.table(table(df_hh$impact3_3_safety_walking)), 2)
df_ind <- df_ind %>%
mutate(outcome1_3_legal_documents = case_when(
PRT01_SS_ID != "none" ~ 1,
PRT01_SS_ID == "none"  ~ 0,
PRT01_SS_ID == "pnta" ~ NA_real_,
PRT01_SS_ID == "other" ~ NA_real_,
PRT01_SS_ID == "donotknow" ~ NA_real_,
TRUE ~ 1)
) %>%
mutate(outcome1_3_legal_documents = labelled(outcome1_3_legal_documents,
labels = c(
'Yes'= 1,
'No'= 0
),
label = "Proportion of Persons of Concern with legally recognized identity documents or credentials"))
table(df_ind$outcome1_3_legal_documents)
round(prop.table(table(df_ind$outcome1_3_legal_documents)), 2)
round(prop.table(table(df_ind$outcome1_3_legal_documents)), 3)
df_hh <- df_hh %>%
mutate(
outcome13_1_bank_account = case_when(
L12_SS_HV_BNK_ACC == "yes" ~ 1,
L12_SS_HV_BNK_ACC == "no" ~ 0,
TRUE ~ NA_real_)
) %>%
mutate(outcome13_1_bank_account = labelled(outcome13_1_bank_account,
labels = c(
"Yes" = 1,
"No" = 0
),
label = "PoC with an account at a bank or other financial institution or with a mobile-money service provider"))
round(prop.table(table(df_hh$outcome13_1_bank_account)), 2)
df_hh <- df_hh %>%
mutate(outcome13_2_income =case_when(
L13_SS_AFF_GOODS == "more" ~ 1,
L13_SS_AFF_GOODS == "same" | L13_SS_AFF_GOODS == "fewer" ~ 0,
TRUE ~ NA_real_)
) %>%
mutate(outcome13_2_income = labelled(outcome13_2_income,
labels = c(
"Yes" = 1,
"No" = 0
),
label = "Proportion of PoC who self-report positive changes in their income compared to previous year"))
round(prop.table(table(df_hh$outcome13_2_income)), 2)
df_ind <- df_ind %>%
mutate(employed = case_when(
SE2_SS_WORK == "yes" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
SE3_SS_BUSINESS == "yes" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
SE4_SS_FAM_BUSINESS == "yes" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
# SE5_SS_HELP_FAM_BUSINESS == "yes" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,   # Poland doesn't have this question
SE2_SS_WORK == "no" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 0,
SE3_SS_BUSINESS == "no" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 0,
SE4_SS_FAM_BUSINESS == "no" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 0,
# SE5_SS_HELP_FAM_BUSINESS == "no" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 0,     # Poland doesn't have this question
SE2_SS_WORK == "PreferNotAnswer" | SE3_SS_BUSINESS == "PreferNotAnswer" | SE4_SS_FAM_BUSINESS == "PreferNotAnswer" ~ NA_real_,
TRUE ~ NA_real_
)) %>%
mutate(unemployed = case_when(
employed == 0 & SE6_SS_TRY_FIND_JOB == "yes" & SE7_SS_START_WORK_IN_2_WKS == "yes" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
employed == 1 & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 0,
is.na(employed) | is.na(SE6_SS_TRY_FIND_JOB) | is.na(SE7_SS_START_WORK_IN_2_WKS) ~ NA_real_,
TRUE ~ 0
)) %>%
mutate(labour_force = case_when(
(employed == 1 | unemployed == 1) & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
is.na(employed) | is.na(unemployed) ~ NA_real_,
TRUE ~ 0
))
unemployed_sum <- sum(df_ind$unemployed, na.rm = TRUE)
labour_force_total <- sum(df_ind$labour_force, na.rm = TRUE)
df_ind <- df_ind %>%
mutate(outcome13_3_unemployment = unemployed_sum / labour_force_total)
mean_outcome13_3_unemployment <- mean(df_ind$outcome13_3_unemployment, na.rm = TRUE)
print(mean_outcome13_3_unemployment)
df_hh <- df_hh %>%
mutate(outcome16_2_social_protection = case_when(
SE2.11b_SM_BEN_HST %in% c("cash_benefits", "disability_grant", "unemployment_grant", "child_family_grant", "other_source") ~ 1,
SE2.11b_SM_BEN_HST %in% c("prefer_not_to_answer", "dont_know") ~ NA_real_,
TRUE ~ 0
)) %>%
mutate(outcome16_2_social_protection = labelled(outcome16_2_social_protection,
labels = c('Yes' = 1,
'No' = 0),
label = "Proportion of Persons of Concern covered by social protection floors/systems"))
table(df_hh$outcome16_2_social_protection)
round(prop.table(table(df_hh$outcome16_2_social_protection)), 2)
df_hh <- df_hh %>%
mutate(crowding = DR8_NUM_HH_SIZE / SHL02_NUM_ROOMS
) %>%
mutate(sufficient_dwel_1 =
case_when( ## if crowding <= 3, not overcrowded
crowding <= 3 ~ 1,
TRUE ~ 0)
)
round(prop.table(table(df_hh$sufficient_dwel_1)), 2)
df_hh <- df_hh %>%
mutate(crowding = DR8_NUM_HH_SIZE / SHL02_NUM_ROOMS
) %>%
mutate(sufficient_dwel_1 =
case_when( ## if crowding <= 3, not overcrowded
crowding <= 3 ~ 1,
TRUE ~ 0)
)
round(prop.table(table(df_hh$sufficient_dwel_1)), 2)
df_hh <- df_hh %>%
mutate(sufficient_dwel_2 = case_when(
SHL07_SM_LIV_COND_no_issues == 1 |
(SHL07_SM_LIV_COND_unclean_space == 1 | SHL07_SM_LIV_COND_inaccessible_by_transportation == 1) &
SHL07_SM_LIV_COND_unable_to_cook_store_food == 0 &
SHL07_SM_LIV_COND_lack_of_showers_toilets == 0 &
SHL07_SM_LIV_COND_lack_of_hot_water == 0 &
SHL07_SM_LIV_COND_do_not_feel_protected == 0 &
SHL07_SM_LIV_COND_insufficient_privacy == 0 &
SHL07_SM_LIV_COND_unable_to_keep_warm_cool == 0 &
SHL07_SM_LIV_COND_unclean_space == 0 &
SHL07_SM_LIV_COND_inaccessible_by_transportation == 0 &
SHL07_SM_LIV_COND_disposal_of_waste_system == 0 &
SHL07_SM_LIV_COND_inaccessible_to_disabled == 0 &
SHL07_SM_LIV_COND_insufficient_sleeping_materials == 0 ~ 1,
SHL07_SM_LIV_COND_dont_know == 1 | SHL07_SM_LIV_COND_prefer_not_to_say == 1 ~ NA_real_,
TRUE ~ 0
))
df_hh <- df_hh %>%
mutate(outcome9_1_housing = case_when(
sufficient_dwel_1 == 0 | sufficient_dwel_2 == 0  ~ 0,
sufficient_dwel_1 == 1 & sufficient_dwel_2 == 1  ~ 1,
TRUE ~ NA_real_ )
) %>%
mutate(outcome9_1_housing = labelled(outcome9_1_housing,
labels = c(
"Yes" = 1,
"No" = 0
),
label = "Proportion of PoCs living in habitable and affordable housing"))
table(df_hh$outcome9_1_housing)
round(prop.table(table(df_hh$outcome9_1_housing)), 2)
round(prop.table(table(df_hh$sufficient_dwel_1)), 2)
df_hh <- df_hh %>%
mutate(sufficient_dwel_2 = case_when(
SHL07_SM_LIV_COND_no_issues == 1 |
(SHL07_SM_LIV_COND_unclean_space == 1 | SHL07_SM_LIV_COND_inaccessible_by_transportation == 1) &
SHL07_SM_LIV_COND_unable_to_cook_store_food == 0 &
SHL07_SM_LIV_COND_lack_of_showers_toilets == 0 &
SHL07_SM_LIV_COND_lack_of_hot_water == 0 &
SHL07_SM_LIV_COND_do_not_feel_protected == 0 &
SHL07_SM_LIV_COND_insufficient_privacy == 0 &
SHL07_SM_LIV_COND_unable_to_keep_warm_cool == 0 &
SHL07_SM_LIV_COND_unclean_space == 0 &
SHL07_SM_LIV_COND_inaccessible_by_transportation == 0 &
SHL07_SM_LIV_COND_disposal_of_waste_system == 0 &
SHL07_SM_LIV_COND_inaccessible_to_disabled == 0 &
SHL07_SM_LIV_COND_insufficient_sleeping_materials == 0 ~ 1,
SHL07_SM_LIV_COND_dont_know == 1 | SHL07_SM_LIV_COND_prefer_not_to_say == 1 ~ NA_real_,
TRUE ~ 0
))
round(prop.table(table(df_hh$outcome9_1_housing)), 2)
round(prop.table(table(df_hh$outcome9_1_housing)), 2)
df_ind <- df_ind %>%
mutate(outcome10_1_measles = case_when(
H5.1_SS_HLTH_VACCINE_MEASLES == "yes" ~ 1,
H5.1_SS_HLTH_VACCINE_MEASLES == "no"  ~ 0,
TRUE ~ NA_real_
)) %>%
mutate(outcome10_1_measles = labelled(outcome10_1_measles,
labels = c(
"Yes" = 1,
"No" = 0
),
label = "Proportion of children aged 9 months to five years who have received measles vaccination*"))
table(df_ind$outcome10_1_measles)
round(prop.table(table(df_ind$outcome10_1_measles)), 2)
df_ind <- df_ind %>%
mutate(outcome10_1_polio = case_when(
H6_SS_HLTH_VACCINE_POLIO == "1_dose" | H6_SS_HLTH_VACCINE_POLIO == "2_doses" | H6_SS_HLTH_VACCINE_POLIO == "3_doses" | H6_SS_HLTH_VACCINE_POLIO == "4_doses" ~ 1,
H6_SS_HLTH_VACCINE_POLIO == "0_none" ~ 0,
TRUE ~ NA_real_
)) %>%
mutate(outcome10_1_polio = labelled(outcome10_1_polio,
labels = c(
"Yes" = 1,
"No" = 0
),
label = "Proportion of children aged 9 months to five years who have received polio vaccination*"))
table(df_ind$outcome10_1_polio)
round(prop.table(table(df_ind$outcome10_1_polio)), 2)
df_hh <- df_hh %>%
mutate(nationality = case_when(
DR1_SM_NAT %in% c("bulgarian", "moldovan", "romanian", "russian") ~ "other",
DR1_SM_NAT %in% c("moldovan ukrainian", "polish ukrainian", "russian ukrainian", "ukrainian bulgarian",
"ukrainian hungarian", "ukrainian moldovan", "ukrainian other", "ukrainian polish",
"ukrainian romanian", "ukrainian russian", "ukrainian russian polish", "ukrainian slovakian") ~ "ukrainian + other",
DR1_SM_NAT == "ukrainian" ~ "ukrainian",
TRUE ~ NA_character_
))
result_nationality <- df_hh %>% filter(!is.na(nationality)) %>%
group_by(nationality) %>%
summarise(Count = n()) %>%
mutate(Percentage = prop.table(Count) * 100)
print(result_nationality)
# Assuming df_hh_filtered is your data frame
min_value <- min(df_hh$DR8_NUM_HH_SIZE)
max_value <- max(df_hh$DR8_NUM_HH_SIZE) # max is 11 so we are leaving it as it is
cat("Minimum value:", min_value, "\n")
cat("Maximum value:", max_value, "\n")
df_hh %>% filter(!is.na(DR8_NUM_HH_SIZE)) %>% summarise(mean = mean(DR8_NUM_HH_SIZE))
unique_responses <- unique(df_ind$E6_SS_DIST_LER)
print(unique_responses)
df_ind <- df_ind %>%
mutate(distant_learning_grouped = case_when(
E6_SS_DIST_LER == "no"  ~ 0,
E6_SS_DIST_LER %in% paste0("grade_", 1:12) & (DR.11_NUM_AGE > 5 & DR.11_NUM_AGE < 16) ~ 1,
E6_SS_DIST_LER == "PreferNotAnswer"  ~ NA_real_ ,
TRUE ~ NA_real_
)) %>%
mutate(distant_learning_grouped = labelled(distant_learning_grouped,
labels = c(
"Yes" = 1,
"No" = 0
),
label = "Accessing Ukrainian distant learning"))
round(prop.table(table(df_ind$distant_learning_grouped)), 2)
df_ind <- df_ind %>%
mutate(attending_both_education = case_when(
(distant_learning_grouped == 1 & E1_SS_ATT_EDU == "enrolledandattended") & (DR.11_NUM_AGE > 5 & DR.11_NUM_AGE < 16) ~ 1,
(DR.11_NUM_AGE > 5 & DR.11_NUM_AGE < 16) ~ 0,
TRUE ~ NA_real_
))
table(df_ind$attending_both_education)
round(prop.table(table(df_ind$attending_both_education)), 2)
df_hh_filtered_feedback <- filter(df_hh, AAP.5_SM_TOP_NEEDS_no_needs  != 1 & AAP.4_SM_PRF_FEEDBACK_prefer_not_to_answer!= 1 & AAP.4_SM_PRF_FEEDBACK_do_not_know !=1 )
df_hh_filtered_feedback %>%
select(starts_with("AAP.4_SM_PRF_FEEDBACK")) %>%
mutate(across(everything(), as.character)) %>%
pivot_longer(cols = everything(),
names_to = "variable",
values_to = "answer") %>%
group_by(variable) %>%
summarise(per = round(sum(answer == "1", na.rm = TRUE) / sum(!is.na(answer)), 3)) %>%
arrange(desc(per))
df_hh_filtered_needs <- filter(df_hh, AAP.5_SM_TOP_NEEDS_no_needs  != 1)
df_hh_filtered_needs %>%
select(starts_with("AAP.5_SM_TOP_NEEDS")) %>%
mutate(across(everything(), as.character)) %>%
pivot_longer(cols = everything(),
names_to = "variable",
values_to = "answer") %>%
group_by(variable) %>%
summarise(per = round(sum(answer == "1", na.rm = TRUE) / sum(!is.na(answer)), 3)) %>%
arrange(desc(per))
df_hh_filtered_difficulty_work <- filter(df_ind, SE12_SM_EMP_BARR_none  != 1 & SE12_SM_EMP_BARR_prefer_not_to_answer != 1)
df_hh_filtered_difficulty_work %>%
select(starts_with("SE12_SM_EMP_BARR")) %>%
mutate(across(everything(), as.character)) %>%
pivot_longer(cols = everything(),
names_to = "variable",
values_to = "answer") %>%
group_by(variable) %>%
summarise(per = round(sum(answer == "1", na.rm = TRUE) / sum(!is.na(answer)), 3)) %>%
arrange(desc(per))
column_name <- 'SE11_SS_CONTRACT'
# Exclude "PreferNotAnswer" or "dont_know" responses
df_ind_contract <- df_ind[!(df_ind[[column_name]] %in% c("prefer_not_to_answer", "dont_know")), ]
# Use table() to tabulate response options
tabulated_data <- table(df_ind_contract[[column_name]])
# Calculate the percentage of total for each category
percentage_data <- prop.table(tabulated_data) * 100
# Combine the tabulated data and percentage data into a data frame
work_contract <- data.frame(ResponseCategory = names(tabulated_data),
Count = as.numeric(tabulated_data),
Percentage = as.numeric(percentage_data))
# Print or display the result
print(work_contract)
table(df_ind_contract[[column_name]])
df_hh_filtered_economic_inclusion <- filter(df_hh, SE1_SM_SUP_SRV_none != 1 & SE1_SM_SUP_SRV_prefer_not_to_answer != 1 & SE1_SM_SUP_SRV_dont_know!= 1)
df_hh_filtered_economic_inclusion %>%
select(starts_with("SE1_SM_SUP_SRV")) %>%
mutate(across(everything(), as.character)) %>%
pivot_longer(cols = everything(),
names_to = "variable",
values_to = "answer") %>%
group_by(variable) %>%
summarise(per = round(sum(answer == "1", na.rm = TRUE) / sum(!is.na(answer)), 3)) %>%
arrange(desc(per))
df_hh_filtered_health_barrier <- filter(df_ind, H4_SM_HLTH_ACC_BARRIER_pnta != 1)
df_hh_filtered_health_barrier %>%
select(starts_with("H4_SM_HLTH_ACC_BARRIER")) %>%
mutate(across(everything(), as.character)) %>%
pivot_longer(cols = everything(),
names_to = "variable",
values_to = "answer") %>%
group_by(variable) %>%
summarise(per = round(sum(answer == "1", na.rm = TRUE) / sum(!is.na(answer)), 3)) %>%
arrange(desc(per))
df_ind <- df_ind %>%
mutate(education_level = case_when(
SE1_SS_EDU_LVL %in% c("master", "phd", "grand_phd") ~ "Master and above",
SE1_SS_EDU_LVL %in% c("no_edu", "pri_edu", "sec_edu") ~ "Lower education",
TRUE ~ as.character(SE1_SS_EDU_LVL)
))
# Assuming your column name is "SE1_SS_EDU_LVL"
column_name <- "education_level"
# Exclude "PreferNotAnswer" responses
df_education <- df_ind[df_ind[[column_name]] != "PreferNotAnswer", ]
# Use table() to tabulate response options
tabulated_data <- table(df_education[[column_name]])
# Calculate the percentage of the total for each category
percentage_data <- prop.table(tabulated_data) * 100
# Combine the tabulated data and percentage data into a data frame
result_df <- data.frame(ResponseCategory = names(tabulated_data),
Count = as.numeric(tabulated_data),
Percentage = as.numeric(percentage_data))
# Print or display the result
print(result_df)
# Use unique() on a specific column
unique_values_column1 <- unique(df_ind$CP2_SS_BLG_NF)
# Print the unique values from column1
print(unique_values_column1)
# create tag - yes_nuclear_family
df_ind <- df_ind %>%
mutate(children_no_nuclear_family = case_when(
CP2_SS_BLG_NF == "yes_nuclear_family" ~ 0, # is part of nuclear family
CP2_SS_BLG_NF != "yes_nuclear_family" & !is.na(CP2_SS_BLG_NF) & CP2_SS_BLG_NF != "DoNotKnow" & CP2_SS_BLG_NF != "PreferNotAnswer" ~ 1,  # do not belong to the nuclear family (and not NA)
TRUE ~ NA_real_
))
table(df_ind$children_no_nuclear_family)
# Exclude "PreferNotAnswer" response
df_ind_filtered <- df_ind[df_ind$children_no_nuclear_family != "DoNotKnow", ]
# Use table() to tabulate response options
tabulated_data <- table(df_ind_filtered$children_no_nuclear_family)
# Calculate the percentage of total for each category
percentage_data <- prop.table(tabulated_data) * 100
# Combine the tabulated data and percentage data into a data frame
result_children_no_family <- data.frame(
ResponseCategory = names(tabulated_data),
Count = as.numeric(tabulated_data),
Percentage = as.numeric(percentage_data)
)
# Print or display the result
print(result_children_no_family)
column_name <- "PSEA3_SS_BHV_RPT"
# Exclude "PreferNotAnswer" response
df_hh_filtered <- df_hh[!(df_hh[[column_name]] %in% c("DoNotKnow", "PreferNotAnswer")), ]
# Use table() to tabulate response options
tabulated_data <- table(df_hh_filtered[[column_name]])
# Calculate the percentage of total for each category
percentage_data <- prop.table(tabulated_data) * 100
# Combine the tabulated data and percentage data into a data frame
result_aid_worker_inappropriate_behavior <- data.frame(
ResponseCategory = names(tabulated_data),
Count = as.numeric(tabulated_data),
Percentage = as.numeric(percentage_data)
)
# Print or display the result
print(result_aid_worker_inappropriate_behavior)
column_name <- "SHL01_SS_ACCOM_TYP"
# Exclude "PreferNotAnswer" response
df_hh_filtered <- df_hh[!(df_hh[[column_name]] %in% c("DoNotKnow", "prefer_not_to_answer")), ]
# Use table() to tabulate response options
tabulated_data <- table(df_hh_filtered[[column_name]])
# Calculate the percentage of total for each category
percentage_data <- prop.table(tabulated_data) * 100
# Combine the tabulated data and percentage data into a data frame
result_accommodation_type <- data.frame(
ResponseCategory = names(tabulated_data),
Count = as.numeric(tabulated_data),
Percentage = as.numeric(percentage_data)
)
# Print or display the result
print(result_accommodation_type )
df_ind <- df_ind %>%
mutate(inactive_youth = case_when(
(employed != 1 & E1_SS_ATT_EDU != "yes" & !(SE8_SS_ACTIVITY %in% c("professional_training", "studying")) & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE <= 24)) ~ 1,
(employed == 1 | E1_SS_ATT_EDU == "yes" | SE8_SS_ACTIVITY %in% c("professional_training", "studying")) & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE <= 24) ~ 0,
TRUE ~ NA_real_   ))
round(prop.table(table(df_ind$inactive_youth)), 2)
column_name <- "SHL04"
# Exclude "PreferNotAnswer" response
df_hh_filtered <- df_hh[!(df_hh[[column_name]] %in% c("not_applicable", "do_not_know","prefer_not_to_answer")), ]
# Use table() to tabulate response options
tabulated_data <- table(df_hh_filtered[[column_name]])
# Calculate the percentage of total for each category
percentage_data <- prop.table(tabulated_data) * 100
# Combine the tabulated data and percentage data into a data frame
result_paying_rent_no_stress <- data.frame(
ResponseCategory = names(tabulated_data),
Count = as.numeric(tabulated_data),
Percentage = as.numeric(percentage_data)
)
# Print or display the result
print(result_paying_rent_no_stress)
column_name <- "SHL06_SS_UND_PRESSURE"
# Exclude "PreferNotAnswer" response
df_hh_filtered <- df_hh[!(df_hh[[column_name]] %in% c("not_applicable", "do_not_know","prefer_not_to_answer","PreferNotAnswer")), ]
# Use table() to tabulate response options
tabulated_data <- table(df_hh_filtered[[column_name]])
# Calculate the percentage of total for each category
percentage_data <- prop.table(tabulated_data) * 100
# Combine the tabulated data and percentage data into a data frame
result_pressure_to_leave <- data.frame(
ResponseCategory = names(tabulated_data),
Count = as.numeric(tabulated_data),
Percentage = as.numeric(percentage_data)
)
# Print or display the result
print(result_pressure_to_leave)
df_ind$DR.11_NUM_AGE <- as.numeric(as.character(df_ind$DR.11_NUM_AGE))
df_ind$age_cat <- cut(df_ind$DR.11_NUM_AGE,
breaks = c(-1, 4, 17, 34, 60, Inf),
labels = c("0-4", "5-17", "18-34", "35-60", "60+"))
table(df_ind$age_cat)
pop_pyramid <- table(df_ind$age_cat, df_ind$female)
df_ind %>% group_by(age_cat, female) %>%  count() %>%  ungroup() %>% mutate(per = n/sum(n)*100)
round(prop.table(table(df_hh$labour_force)), 2)
round(prop.table(table(df_ind$labour_force)), 2)
df_ind %>% filter(DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) %>% count()
df_ind %>% filter(DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) %>% group_by(labour_force) %>% count()
df_ind %>% filter(DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) %>% filter(!is.na(labour_force)) %>% group_by(labour_force) %>% count()
df_ind %>% filter(DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) %>% filter(!is.na(labour_force)) %>% group_by(labour_force) %>% count() %>% mutate(per= prop.table(n) * 100)
df_ind %>% filter(DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) %>% filter(!is.na(labour_force)) %>% group_by(labour_force) %>% count() %>% group_by(labour_force) %>%  mutate(per= prop.table(n) * 100)
df_ind %>% filter(DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) %>% filter(!is.na(labour_force)) %>% group_by(labour_force) %>%
count() %>% mutate(per= n/sum(n))
df_ind %>% filter(DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) %>% filter(!is.na(labour_force)) %>% group_by(labour_force) %>%
count() %>% ungroup(labour_force) %>%  mutate(per= n/sum(n))
round(prop.table(table(df_ind$labour_force)), 2)
df_ind %>% filter(DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) %>%  group_by(labour_force) %>%
count() %>% ungroup(labour_force) %>%  mutate(per= n/sum(n))
