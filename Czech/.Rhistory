df_hh <- read_excel("C:/Users/VONBORST/OneDrive - UNHCR/MSNA Datasets/Czech/Latest clean dataset/msna_czech-republic_2023_household-data-file.xlsx")
library(robotoolbox) # This loads koboloadeR package
library(haven)
library(tidyverse)
library(readxl)
library(srvyr)
library(ggplot2)
library(robotoolbox)
library(labelled)
library(remotes)
library(dm)
library(janitor)
library(dplyr)
library(DiagrammeR)
library(Hmisc)
library(xlsx)
df_hh <- read_excel("C:/Users/VONBORST/OneDrive - UNHCR/MSNA Datasets/Czech/Latest clean dataset/msna_czech-republic_2023_household-data-file.xlsx")
df_ind <- read_excel("C:/Users/VONBORST/OneDrive - UNHCR/MSNA Datasets/Czech/Latest clean dataset/unhcr_cze_2023_msna_indv_clean.xlsx")
# Replace 9999 and 99999 with NA in multiple columns
df_hh <- df_hh %>%
mutate(across(c(SE.2.1_NUM_FOOD, SE.2.2_NUM_ACCOM,SE.2.3_NUM_HLTH, SE.2.4_NUM_HYG,
SE.2.5_NUM_COMM, SE.2.6_NUM_HH_BILL, SE.2.7_NUM_OTH, SE.2.8_NUM_HLTH_6_MTH,
SE.2.9_NUM_DEBT, SE.2.10_NUM_EDU), ~ replace(., . %in% c(9999, 99999), NA)))
# Check the type of the L9_SS_MIGR column
column_type <- typeof(df_hh$SE.2.8_NUM_HLTH_6_MTH)
# Print the result
print(column_type)
# df_hh$SE.2.8_NUM_HLTH_6_MTH  <- as.numeric(df_hh$SE.2.0_NUM_HH_EXP)
df_hh$SE.2.8_NUM_HLTH_6_MTH  <- df_hh$SE.2.8_NUM_HLTH_6_MTH  / 6
# DEBT EXPENDITURE 6 MONTHS - CONVERT TO 1 MONTH
df_hh$SE.2.9_NUM_DEBT  <- df_hh$SE.2.9_NUM_DEBT  / 6
# EDUCATION EXPENDITURE 12 MONTHS - CONVERT TO 1 MONTH
df_hh$SE.2.10_NUM_EDU  <- df_hh$SE.2.10_NUM_EDU  / 12
# Select the columns you want to sum
columns_to_sum <- c(
"SE.2.1_NUM_FOOD", "SE.2.2_NUM_ACCOM", "SE.2.3_NUM_HLTH",
"SE.2.4_NUM_HYG", "SE.2.5_NUM_COMM", "SE.2.6_NUM_HH_BILL",
"SE.2.7_NUM_OTH", "SE.2.8_NUM_HLTH_6_MTH", "SE.2.9_NUM_DEBT",
"SE.2.10_NUM_EDU"
)
# Create a logical vector indicating if NAs are present in the specified columns
na_in_se_columns <- rowSums(is.na(df_hh[, c("SE.2.1_NUM_FOOD", "SE.2.2_NUM_ACCOM", "SE.2.3_NUM_HLTH")])) > 0
# Use rowSums to sum the selected columns while ignoring missing values
df_hh$total_expenditure <- round(rowSums(df_hh[columns_to_sum], na.rm = TRUE), 2)
# Assign NA to total_expenditure when NAs are present in the specified columns
df_hh$total_expenditure[na_in_se_columns] <- NA
# 1. SHARE OF EXPENDITURE ON FOOD
df_hh$share_food_expenditure <- round(df_hh$SE.2.1_NUM_FOOD / df_hh$total_expenditure,2)
df_hh %>% summarise(average = mean(share_food_expenditure, na.rm = T))
df_ind <- df_ind %>% # Those who were able to access healthcare
mutate(health_access = case_when(
H3_SS_HLTH_OBTAIN_CARE == "yes"  ~ 1,
H3_SS_HLTH_OBTAIN_CARE == "DoNotKnow" ~ NA_real_,
H3_SS_HLTH_OBTAIN_CARE == "PreferNotAnswer" ~ NA_real_,
TRUE ~ 0)
)
df_ind <- df_ind %>% # Those who needed and asked to access healthcare - remove those who didn't try to access healthcare for some reasons
mutate(health_need = case_when(
H1_SS_HLTH_PBLM == "yes" & H3_SS_HLTH_OBTAIN_CARE == "no" & H4_SM_HLTH_ACC_BARRIER == "wanted_to_wait_and_see_if_the_problem_go_better" ~ 0,
H1_SS_HLTH_PBLM == "yes" & H3_SS_HLTH_OBTAIN_CARE == "no" & H4_SM_HLTH_ACC_BARRIER == "do_not_trust_local_provider" ~ 0,
H1_SS_HLTH_PBLM == "yes" & H3_SS_HLTH_OBTAIN_CARE == "no" & H4_SM_HLTH_ACC_BARRIER == "fear_or_distrust_of_HW_EXAM_treatment" ~ 0,
H1_SS_HLTH_PBLM == "yes" & H3_SS_HLTH_OBTAIN_CARE == "no" & H4_SM_HLTH_ACC_BARRIER == "other" ~ 0,
H1_SS_HLTH_PBLM == "yes" ~ 1,
H1_SS_HLTH_PBLM == "DoNotKnow" ~ NA_real_,
H1_SS_HLTH_PBLM == "PreferNotAnswer" ~ NA_real_,
TRUE ~ 0
)) %>%
mutate(impact2_3_health = health_access / health_need) %>%
mutate(impact2_3_health = labelled(impact2_3_health,
labels = c (
"Yes"= 1,
"No"= 0
),
label="Proportion of PoC with access to health services"))
table(df_ind$impact2_3_health)
round(prop.table(table(df_ind$impact2_3_health)), 3)
round(prop.table(table(df_ind$labour_force)), 2)
df_ind <- df_ind %>%
mutate(employed = case_when(
SE2_SS_WORK == "yes" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
SE3_SS_BUSINESS == "yes" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
SE4_SS_FAM_BUSINESS == "yes" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
SE5_SS_HELP_FAM_BUSINESS == "yes" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
SE2_SS_WORK == "no" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 0,
SE3_SS_BUSINESS == "no" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 0,
SE4_SS_FAM_BUSINESS == "no" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 0,
SE5_SS_HELP_FAM_BUSINESS == "no" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 0,
SE2_SS_WORK == "PreferNotAnswer" | SE3_SS_BUSINESS == "PreferNotAnswer" | SE4_SS_FAM_BUSINESS == "PreferNotAnswer" | SE5_SS_HELP_FAM_BUSINESS == "PreferNotAnswer" ~ NA_real_,
TRUE ~ NA_real_
)) %>%
mutate(unemployed = case_when(
employed == 0 & SE6_SS_TRY_FIND_JOB == "yes" & SE7_SS_START_WORK_IN_2_WKS == "yes" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
employed == 1 & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 0,
is.na(employed) | is.na(SE6_SS_TRY_FIND_JOB) | is.na(SE7_SS_START_WORK_IN_2_WKS) ~ NA_real_,
TRUE ~ 0
)) %>%
mutate(labour_force = case_when(
(employed == 1 | unemployed == 1) & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
is.na(employed) | is.na(unemployed) ~ NA_real_,
TRUE ~ 0
))
round(prop.table(table(df_ind$labour_force)), 2)
df_ind <- df_ind %>%
mutate(employed = case_when(
SE2_SS_WORK == "yes" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
SE3_SS_BUSINESS == "yes" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
SE4_SS_FAM_BUSINESS == "yes" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
SE5_SS_HELP_FAM_BUSINESS == "yes" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
SE2_SS_WORK == "no" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 0,
SE3_SS_BUSINESS == "no" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 0,
SE4_SS_FAM_BUSINESS == "no" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 0,
SE5_SS_HELP_FAM_BUSINESS == "no" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 0,
SE2_SS_WORK == "PreferNotAnswer" | SE3_SS_BUSINESS == "PreferNotAnswer" | SE4_SS_FAM_BUSINESS == "PreferNotAnswer" | SE5_SS_HELP_FAM_BUSINESS == "PreferNotAnswer" ~ NA_real_,
TRUE ~ NA_real_
)) %>%
mutate(unemployed = case_when(
employed == 0 & SE6_SS_TRY_FIND_JOB == "yes" & SE7_SS_START_WORK_IN_2_WKS == "yes" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
employed == 1 & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 0,
is.na(employed) | is.na(SE6_SS_TRY_FIND_JOB) | is.na(SE7_SS_START_WORK_IN_2_WKS) ~ NA_real_,
TRUE ~ 0
)) %>%
mutate(labour_force = case_when(
(employed == 1 | unemployed == 1) & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
is.na(employed) | is.na(unemployed) ~ NA_real_,
TRUE ~ 0
))
df_hh <- read_excel("C:/Users/VONBORST/OneDrive - UNHCR/MSNA/Czech/MSNA_updated_Czech/Data/2023_Czech_Republic_Multi-Sector_Needs_Assessment.xlsx", sheet = "2023 Czech Republic Multi-Se...")
df_ind <- read_excel("C:/Users/VONBORST/OneDrive - UNHCR/MSNA/Czech/MSNA_updated_Czech/Data/2023_Czech_Republic_Multi-Sector_Needs_Assessment.xlsx", sheet = "Info")
df_ind <- df_ind %>%
mutate(employed = case_when(
SE2_SS_WORK == "yes" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
SE3_SS_BUSINESS == "yes" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
SE4_SS_FAM_BUSINESS == "yes" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
SE5_SS_HELP_FAM_BUSINESS == "yes" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
SE2_SS_WORK == "no" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 0,
SE3_SS_BUSINESS == "no" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 0,
SE4_SS_FAM_BUSINESS == "no" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 0,
SE5_SS_HELP_FAM_BUSINESS == "no" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 0,
SE2_SS_WORK == "PreferNotAnswer" | SE3_SS_BUSINESS == "PreferNotAnswer" | SE4_SS_FAM_BUSINESS == "PreferNotAnswer" | SE5_SS_HELP_FAM_BUSINESS == "PreferNotAnswer" ~ NA_real_,
TRUE ~ NA_real_
)) %>%
mutate(unemployed = case_when(
employed == 0 & SE6_SS_TRY_FIND_JOB == "yes" & SE7_SS_START_WORK_IN_2_WKS == "yes" & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
employed == 1 & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 0,
is.na(employed) | is.na(SE6_SS_TRY_FIND_JOB) | is.na(SE7_SS_START_WORK_IN_2_WKS) ~ NA_real_,
TRUE ~ 0
)) %>%
mutate(labour_force = case_when(
(employed == 1 | unemployed == 1) & (DR.11_NUM_AGE > 15 & DR.11_NUM_AGE < 65) ~ 1,
is.na(employed) | is.na(unemployed) ~ NA_real_,
TRUE ~ 0
))
round(prop.table(table(df_ind$labour_force)), 2)
unemployed_sum <- sum(df_ind$unemployed, na.rm = TRUE)
labour_force_total <- sum(df_ind$labour_force, na.rm = TRUE)
df_ind <- df_ind %>%
mutate(outcome13_3_unemployment = unemployed_sum / labour_force_total)
mean_outcome13_3_unemployment <- mean(df_ind$outcome13_3_unemployment, na.rm = TRUE)
print(mean_outcome13_3_unemployment)
df_hh_filtered_feedback <- filter(df_hh, AAP.5_SM_TOP_NEEDS_no_needs  != 1 & AAP.4_SM_PRF_FEEDBACK_prefer_not_to_answer!= 1 & AAP.4_SM_PRF_FEEDBACK_do_not_know !=1 )
df_hh_filtered_feedback %>%
select(starts_with("AAP.4_SM_PRF_FEEDBACK")) %>%
mutate(across(everything(), as.character)) %>%
pivot_longer(cols = everything(),
names_to = "variable",
values_to = "answer") %>%
group_by(variable) %>%
summarise(per = round(sum(answer == "1", na.rm = TRUE) / sum(!is.na(answer)), 3)) %>%
arrange(desc(per))
df_hh_filtered_feedback <- filter(df_hh, AAP.5_SM_TOP_NEEDS_no_needs  != 1 & AAP.4_SM_PRF_FEEDBACK_prefer_not_to_answer!= 1 & AAP.4_SM_PRF_FEEDBACK_do_not_know !=1 )
df_hh_filtered_feedback <- filter(df_hh, AAP.5_SM_TOP_NEEDS_no_needs  != 1 & AAP.4_SM_PRF_FEEDBACK_prefer_not_to_answer!= 1 & AAP.4_SM_PRF_FEEDBACK_dont_know !=1 )
df_hh_filtered_feedback %>%
select(starts_with("AAP.4_SM_PRF_FEEDBACK")) %>%
mutate(across(everything(), as.character)) %>%
pivot_longer(cols = everything(),
names_to = "variable",
values_to = "answer") %>%
group_by(variable) %>%
summarise(per = round(sum(answer == "1", na.rm = TRUE) / sum(!is.na(answer)), 3)) %>%
arrange(desc(per))
df_hh_filtered_difficulty_work <- filter(df_ind, SE12_SM_EMP_BARR_none  != 1 & SE12_SM_EMP_BARR_prefer_not_to_answer != 1)
df_hh_filtered_difficulty_work %>%
select(starts_with("SE12_SM_EMP_BARR")) %>%
mutate(across(everything(), as.character)) %>%
pivot_longer(cols = everything(),
names_to = "variable",
values_to = "answer") %>%
group_by(variable) %>%
summarise(per = round(sum(answer == "1", na.rm = TRUE) / sum(!is.na(answer)), 3)) %>%
arrange(desc(per))
# Use unique() on a specific column
unique_values_column1 <- unique(df_ind$CP2_SS_BLG_NF)
# Print the unique values from column1
print(unique_values_column1)
# create tag - yes_nuclear_family
df_ind <- df_ind %>%
mutate(children_no_nuclear_family = case_when(
CP2_SS_BLG_NF == "yes_nuclear_family" ~ 0, # is part of nuclear family
CP2_SS_BLG_NF != "yes_nuclear_family" & !is.na(CP2_SS_BLG_NF) & CP2_SS_BLG_NF != "DoNotKnow" & CP2_SS_BLG_NF != "PreferNotAnswer" ~ 1,  # do not belong to the nuclear family (and not NA)
TRUE ~ NA_real_
))
table(df_ind$children_no_nuclear_family)
# Exclude "PreferNotAnswer" response
df_ind_filtered <- df_ind[df_ind$children_no_nuclear_family != "DoNotKnow", ]
# Use table() to tabulate response options
tabulated_data <- table(df_ind_filtered$children_no_nuclear_family)
# Calculate the percentage of total for each category
percentage_data <- prop.table(tabulated_data) * 100
# Combine the tabulated data and percentage data into a data frame
result_children_no_family <- data.frame(
ResponseCategory = names(tabulated_data),
Count = as.numeric(tabulated_data),
Percentage = as.numeric(percentage_data)
)
# Print or display the result
print(result_children_no_family)
